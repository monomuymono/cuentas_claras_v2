AIzaSyDMhW9Fxz2kLG7HszVnBDmgQMJwzXSzd9U

https://script.google.com/macros/s/AKfycbzcp2CFlrnDnIzmRadn553OYMNYXo5AldaGdnmsisgt8O3Qm07tHj5iWGh9dCdg-leQ/exec

{
  "postData": {
    "contents": "{\"action\":\"save\",\"shareId\":\"test_session_123\",\"data\":{\"comensales\":[{\"id\":1,\"name\":\"Juan\",\"selectedItems\":[],\"total\":0}],\"availableProducts\":{},\"totalGeneralMesa\":0,\"propinaSugerida\":0,\"activeSharedInstances\":{}}}"
  }
}


{
  "action": "save",
  "shareId": "mi_id_de_prueba_app_react",
  "data": {
    "comensales": [
      {"id":1,"name":"Alice","selectedItems":[],"total":0}
    ],
    "availableProducts": {},
    "totalGeneralMesa": 10000,
    "propinaSugerida": 1000,
    "activeSharedInstances": {}
  }
}

const SPREADSHEET_ID = 'YOUR_GOOGLE_SHEET_ID_HERE'; // <<-- ¡REEMPLAZA ESTO CON EL ID DE TU HOJA DE CÁLCULO!
const SHEET_NAME = 'Sessions';

// Función auxiliar para obtener la hoja de cálculo
function getSheet() {
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
  if (!sheet) {
    throw new Error('Sheet not found: ' + SHEET_NAME + '. Make sure the sheet name is correct.');
  }
  return sheet;
}

// Función para configurar los encabezados de la hoja (ejecutar una vez manualmente desde Apps Script)
function setupSheetHeaders() {
  try {
    const sheet = getSheet();
    if (sheet.getLastRow() < 1 || sheet.getRange("A1").getValue() !== "shareId" || sheet.getRange("B1").getValue() !== "JSON_DATA") {
      sheet.clearContents(); // Clear existing content if headers are wrong
      sheet.getRange("A1").setValue("shareId");
      sheet.getRange("B1").setValue("JSON_DATA");
      console.log("Sheet headers set successfully.");
    } else {
      console.log("Sheet headers already correct.");
    }
  } catch (e) {
    console.error("Error setting up sheet headers: " + e.message);
    throw e; // Re-throw to show in Apps Script logs
  }
}

function doGet(e) {
  try {
    // Registra el objeto de evento para depuración
    console.log("doGet event object (e):", JSON.stringify(e));

    // Valida si e.parameter existe antes de acceder a sus propiedades
    const shareId = e && e.parameter ? e.parameter.id : undefined;

    const sheet = getSheet();
    const data = sheet.getDataRange().getValues();

    let sessionData = null;
    // Salta la fila de encabezado (índice 0)
    if (shareId) { // Solo intenta buscar datos si se proporciona un shareId
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] === shareId) { // shareId está en la primera columna (índice 0)
          sessionData = data[i][1]; // JSON_DATA está en la segunda columna (índice 1)
          break;
        }
      }
    }

    if (sessionData) {
      return ContentService.createTextOutput(sessionData).setMimeType(ContentService.MimeType.JSON);
    } else {
      return ContentService.createTextOutput(JSON.stringify({ message: "No data found" })).setMimeType(ContentService.MimeType.JSON);
    }
  } catch (error) {
    console.error("Error in doGet:", error);
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message || 'An unknown error occurred in doGet' })).setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  try {
    // Registra el objeto de evento para depuración
    console.log("doPost event object (e):", JSON.stringify(e)); 
    
    // VALIDACIÓN CRÍTICA: Asegurarse de que e.postData y e.postData.contents existen
    if (!e || !e.postData || !e.postData.contents) {
      console.error("doPost received empty or malformed request body. Event object:", JSON.stringify(e));
      return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'No request body or malformed request. Ensure it is a POST request with Content-Type: application/json.' })).setMimeType(ContentService.MimeType.JSON);
    }

    const requestData = JSON.parse(e.postData.contents);
    const action = requestData.action; // 'save' or 'delete'
    const shareId = requestData.shareId;
    const dataToSave = requestData.data; // Full app state for 'save'

    const sheet = getSheet();
    const data = sheet.getDataRange().getValues();

    if (action === 'save') {
      let rowFound = false;
      // Empieza el bucle desde 1 para saltar la fila de encabezados si existen
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] === shareId) {
          sheet.getRange(i + 1, 2).setValue(JSON.stringify(dataToSave)); // Actualiza la columna JSON_DATA
          rowFound = true;
          break;
        }
      }
      if (!rowFound) {
        // Si no se encontró la fila o la hoja está vacía, añade los encabezados primero si es necesario
        if (sheet.getLastRow() < 1 || sheet.getRange("A1").getValue() !== "shareId") {
            sheet.appendRow(["shareId", "JSON_DATA"]);
        }
        sheet.appendRow([shareId, JSON.stringify(dataToSave)]); // Añade una nueva fila
      }
      return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: 'Data saved' })).setMimeType(ContentService.MimeType.JSON);
    } else if (action === 'delete') {
      let rowDeleted = false;
      // Empieza el bucle desde 1 para saltar la fila de encabezados
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] === shareId) {
          sheet.deleteRow(i + 1); // Elimina la fila (i+1 porque Apps Script es 1-indexed)
          rowDeleted = true;
          break;
        }
      }
      return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: rowDeleted ? 'Data deleted' : 'Data not found' })).setMimeType(ContentService.MimeType.JSON);
    }

    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid action' })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error("Error in doPost:", error);
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message || 'An unknown error occurred in doPost' })).setMimeType(ContentService.MimeType.JSON);
  }
}
