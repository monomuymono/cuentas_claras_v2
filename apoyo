AIzaSyDMhW9Fxz2kLG7HszVnBDmgQMJwzXSzd9U

https://script.google.com/macros/s/AKfycbzcp2CFlrnDnIzmRadn553OYMNYXo5AldaGdnmsisgt8O3Qm07tHj5iWGh9dCdg-leQ/exec

{
  "postData": {
    "contents": "{\"action\":\"save\",\"shareId\":\"test_session_123\",\"data\":{\"comensales\":[{\"id\":1,\"name\":\"Juan\",\"selectedItems\":[],\"total\":0}],\"availableProducts\":{},\"totalGeneralMesa\":0,\"propinaSugerida\":0,\"activeSharedInstances\":{}}}"
  }
}


{
  "action": "save",
  "shareId": "mi_id_de_prueba_app_react",
  "data": {
    "comensales": [
      {"id":1,"name":"Alice","selectedItems":[],"total":0}
    ],
    "availableProducts": {},
    "totalGeneralMesa": 10000,
    "propinaSugerida": 1000,
    "activeSharedInstances": {}
  }
}

error: TypeError: errorOutput.addHeader is not a function (línea 65, archivo "Código")

/**
 * @fileoverview
 * Google Apps Script para actuar como un backend simple usando una Hoja de Cálculo de Google.
 * Esta es la versión funcional completa y final.
 *
 * Funcionalidad:
 * - Guarda (POST), carga (GET) y elimina (POST con acción 'delete') sesiones de datos JSON.
 * - Maneja solicitudes CORS (OPTIONS) para permitir el acceso desde aplicaciones web externas.
 * - Se requiere una configuración única ejecutando `setupSheetHeaders` manualmente.
 *
 * ¡IMPORTANTE!
 * 1. Reemplaza 'YOUR_GOOGLE_SHEET_ID_HERE' con el ID real de tu Hoja de Cálculo.
 * 2. Despliega esto como una Aplicación Web, dando acceso a "Cualquier persona".
 */

// --- CONFIGURACIÓN ---
const SPREADSHEET_ID = 'YOUR_GOOGLE_SHEET_ID_HERE'; // <<-- ¡REEMPLAZA ESTO!
const SHEET_NAME = 'Sessions'; // Asegúrate de que este nombre coincida con el de tu hoja.

/**
 * Función auxiliar para obtener el objeto de la hoja de cálculo.
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} La hoja de trabajo.
 */
function getSheet() {
  try {
    const spreadSheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadSheet.getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error('Hoja no encontrada: "' + SHEET_NAME + '". Asegúrate de que el nombre de la hoja en tu Google Sheet sea correcto.');
    }
    return sheet;
  } catch (e) {
    console.error("Error al abrir la Hoja de Cálculo. Verifica que el SPREADSHEET_ID ('" + SPREADSHEET_ID + "') sea correcto y que tengas permiso de acceso. Error: " + e.toString());
    throw new Error("No se pudo acceder a la Hoja de Cálculo. Revisa el ID y los permisos.");
  }
}

/**
 * CONFIGURACIÓN INICIAL: Ejecutar esta función manualmente UNA VEZ desde el editor.
 * Prepara la hoja con los encabezados necesarios ('shareId', 'JSON_DATA').
 */
function setupSheetHeaders() {
  try {
    const sheet = getSheet();
    const headers = sheet.getRange("A1:B1").getValues()[0];
    if (sheet.getLastRow() < 1 || headers[0] !== "shareId" || headers[1] !== "JSON_DATA") {
      sheet.clear();
      sheet.getRange("A1:B1").setValues([["shareId", "JSON_DATA"]]);
      SpreadsheetApp.getUi().alert("Encabezados de la hoja configurados correctamente: 'shareId' y 'JSON_DATA'.");
    } else {
      SpreadsheetApp.getUi().alert("Los encabezados de la hoja ya son correctos.");
    }
  } catch (e) {
    console.error("Error en setupSheetHeaders: " + e.toString());
    SpreadsheetApp.getUi().alert("Error al configurar los encabezados: " + e.message);
  }
}

/**
 * Maneja las solicitudes pre-vuelo OPTIONS para CORS. NO EJECUTAR MANUALMENTE.
 * @param {object} e El objeto del evento de la solicitud.
 * @returns {GoogleAppsScript.Content.TextOutput} La respuesta con las cabeceras CORS.
 */
function doOptions(e) {
  console.log("Recibida solicitud OPTIONS. Respondiendo con cabeceras CORS.");
  const output = ContentService.createTextOutput();
  output.addHeader('Access-Control-Allow-Origin', '*');
  output.addHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS');
  output.addHeader('Access-Control-Allow-Headers', 'Content-Type');
  return output;
}

/**
 * Maneja las solicitudes GET para recuperar los datos de una sesión. NO EJECUTAR MANUALMENTE.
 * @param {object} e El objeto del evento. Espera un parámetro 'id' en la URL.
 * @returns {GoogleAppsScript.Content.TextOutput} La respuesta JSON.
 */
function doGet(e) {
  try {
    const shareId = e.parameter.id;
    
    // Si no se proporciona un ID, se devuelve una respuesta informativa en lugar de fallar.
    if (!shareId) {
      const infoResponse = { status: 'info', message: 'API activa. Proporciona un ID en la URL para obtener datos (ej: ?id=123).' };
      const output = ContentService.createTextOutput(JSON.stringify(infoResponse));
      output.setMimeType(ContentService.MimeType.JSON);
      output.addHeader('Access-Control-Allow-Origin', '*');
      return output;
    }

    const sheet = getSheet();
    const data = sheet.getDataRange().getValues();
    let sessionData = null;

    // Itera desde la segunda fila (índice 1) para saltar los encabezados.
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == shareId) { // Compara el ID en la primera columna (índice 0).
        sessionData = data[i][1]; // Obtiene los datos de la segunda columna (índice 1).
        break;
      }
    }
    
    const responseJson = sessionData ? sessionData : JSON.stringify({ status: "not_found", message: "No se encontraron datos para el ID proporcionado." });
    
    const output = ContentService.createTextOutput(responseJson);
    output.setMimeType(ContentService.MimeType.JSON);
    output.addHeader('Access-Control-Allow-Origin', '*');
    return output;

  } catch (error) {
    console.error("Error en doGet: " + error.toString());
    const errorOutput = ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message }));
    errorOutput.setMimeType(ContentService.MimeType.JSON);
    errorOutput.addHeader('Access-Control-Allow-Origin', '*');
    return errorOutput;
  }
}

/**
 * Maneja las solicitudes POST para guardar o eliminar datos de una sesión. NO EJECUTAR MANUALMENTE.
 * @param {object} e El objeto del evento. El cuerpo de la solicitud debe ser JSON.
 * @returns {GoogleAppsScript.Content.TextOutput} La respuesta JSON con el estado de la operación.
 */
function doPost(e) {
  try {
    const requestData = JSON.parse(e.postData.contents);
    const { action, shareId, data: dataToSave } = requestData;

    if (!action || !shareId) {
        throw new Error("La solicitud POST debe incluir los campos 'action' y 'shareId'.");
    }

    const sheet = getSheet();
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    let response = { status: 'error', message: 'Acción no válida o ID no encontrado.' };
    let rowFound = -1;

    // Buscar la fila correspondiente al shareId.
    for (let i = 1; i < values.length; i++) {
      if (values[i][0] == shareId) {
        rowFound = i + 1; // El índice de la hoja es base 1.
        break;
      }
    }

    if (action === 'save') {
      if (typeof dataToSave === 'undefined') {
        throw new Error("La acción 'save' requiere un campo 'data'.");
      }
      
      const jsonDataString = JSON.stringify(dataToSave);
      if (rowFound > -1) {
        // Actualizar fila existente.
        sheet.getRange(rowFound, 2).setValue(jsonDataString);
        response = { status: 'success', message: 'Datos actualizados correctamente.' };
      } else {
        // Añadir nueva fila.
        sheet.appendRow([shareId, jsonDataString]);
        response = { status: 'success', message: 'Datos guardados correctamente.' };
      }
    } else if (action === 'delete') {
      if (rowFound > -1) {
        sheet.deleteRow(rowFound);
        response = { status: 'success', message: 'Datos eliminados correctamente.' };
      } else {
        response = { status: 'not_found', message: 'No se encontraron datos para eliminar.' };
      }
    }

    const output = ContentService.createTextOutput(JSON.stringify(response));
    output.setMimeType(ContentService.MimeType.JSON);
    output.addHeader('Access-Control-Allow-Origin', '*');
    return output;

  } catch (error) {
    console.error("Error en doPost: " + error.toString());
    const errorOutput = ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message }));
    errorOutput.setMimeType(ContentService.MimeType.JSON);
    errorOutput.addHeader('Access-Control-Allow-Origin', '*');
    return errorOutput;
  }
}


