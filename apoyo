AIzaSyDMhW9Fxz2kLG7HszVnBDmgQMJwzXSzd9U

https://script.google.com/macros/s/AKfycbzcp2CFlrnDnIzmRadn553OYMNYXo5AldaGdnmsisgt8O3Qm07tHj5iWGh9dCdg-leQ/exec

{
  "postData": {
    "contents": "{\"action\":\"save\",\"shareId\":\"test_session_123\",\"data\":{\"comensales\":[{\"id\":1,\"name\":\"Juan\",\"selectedItems\":[],\"total\":0}],\"availableProducts\":{},\"totalGeneralMesa\":0,\"propinaSugerida\":0,\"activeSharedInstances\":{}}}"
  }
}


{
  "action": "save",
  "shareId": "mi_id_de_prueba_app_react",
  "data": {
    "comensales": [
      {"id":1,"name":"Alice","selectedItems":[],"total":0}
    ],
    "availableProducts": {},
    "totalGeneralMesa": 10000,
    "propinaSugerida": 1000,
    "activeSharedInstances": {}
  }
}

/**
 * @fileoverview
 * Google Apps Script (VERSIÓN DE PRUEBA MINIMALISTA)
 *
 * =======================================================================================
 * === PROPÓSITO DE ESTA VERSIÓN ===
 * =======================================================================================
 * Este script ha sido simplificado al máximo para diagnosticar problemas de despliegue y CORS.
 * Las funciones doGet y doPost NO interactúan con la Hoja de Cálculo. Solo confirman
 * que la comunicación entre tu aplicación (ej. Vercel) y Google Apps Script funciona.
 *
 * Si esta versión funciona: El problema está en la configuración de tu Hoja de Cálculo (ID o permisos).
 * Si esta versión falla: El problema está en el proceso de despliegue o en cómo tu app llama a la URL.
 * =======================================================================================
 */

// --- CONFIGURACIÓN (Ignorada en esta versión de prueba, pero déjala para el futuro) ---
const SPREADSHEET_ID = 'YOUR_GOOGLE_SHEET_ID_HERE'; // <<-- ¡REEMPLAZA ESTO!
const SHEET_NAME = 'Sessions'; // Asegúrate de que este nombre coincida con el de tu hoja.

/**
 * Maneja las solicitudes pre-vuelo OPTIONS para CORS. NO EJECUTAR MANUALMENTE.
 * @param {object} e El objeto del evento de la solicitud.
 * @returns {GoogleAppsScript.Content.TextOutput} La respuesta con las cabeceras CORS.
 */
function doOptions(e) {
  console.log("Recibida solicitud OPTIONS. Construyendo respuesta CORS.");
  return ContentService.createTextOutput()
    .addHeader('Access-Control-Allow-Origin', '*')
    .addHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
    .addHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
}

/**
 * VERSIÓN DE PRUEBA de doGet. Solo confirma que la llamada se recibió.
 * @param {object} e El objeto del evento.
 * @returns {GoogleAppsScript.Content.TextOutput} Una respuesta JSON de éxito.
 */
function doGet(e) {
  try {
    const shareId = e && e.parameter ? e.parameter.id : 'ninguno';
    const response = {
      status: 'success',
      message: '[VERSIÓN DE PRUEBA] doGet se ejecutó correctamente.',
      id_recibido: shareId
    };
    
    console.log("doGet de prueba ejecutado con éxito.");

    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON)
      .addHeader('Access-Control-Allow-Origin', '*');
  } catch (error) {
    const errorMessage = '[VERSIÓN DE PRUEBA] Error inesperado en doGet: ' + error.toString();
    console.error(errorMessage);
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: errorMessage }))
      .setMimeType(ContentService.MimeType.JSON)
      .addHeader('Access-Control-Allow-Origin', '*');
  }
}

/**
 * VERSIÓN DE PRUEBA de doPost. Solo confirma que la llamada se recibió.
 * @param {object} e El objeto del evento.
 * @returns {GoogleAppsScript.Content.TextOutput} Una respuesta JSON de éxito.
 */
function doPost(e) {
  try {
    const requestBody = e && e.postData && e.postData.contents ? e.postData.contents : 'cuerpo vacío';
    const response = {
      status: 'success',
      message: '[VERSIÓN DE PRUEBA] doPost se ejecutó correctamente.',
      cuerpo_recibido: requestBody
    };
    
    console.log("doPost de prueba ejecutado con éxito.");

    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON)
      .addHeader('Access-Control-Allow-Origin', '*');
  } catch (error) {
    const errorMessage = '[VERSIÓN DE PRUEBA] Error inesperado en doPost: ' + error.toString();
    console.error(errorMessage);
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: errorMessage }))
      .setMimeType(ContentService.MimeType.JSON)
      .addHeader('Access-Control-Allow-Origin', '*');
  }
}

// ----------------------------------------------------------------------------------
// --- Las funciones de abajo no se usan en la prueba, pero se guardan para referencia ---
// ----------------------------------------------------------------------------------

/**
 * FUNCIÓN DE DIAGNÓSTICO: Ejecuta esta función manualmente desde el editor.
 */
function testEnvironment() {
  try {
    console.log("Iniciando prueba de entorno...");
    const output = ContentService.createTextOutput("Prueba");
    
    if (typeof output.addHeader === 'function') {
      output.addHeader("X-Test-Header", "Success");
      const message = "¡Prueba V8 exitosa! El método 'addHeader' funciona.";
      console.log(message);
      SpreadsheetApp.getUi().alert(message);
    } else {
      throw new Error("¡ERROR CRÍTICO! El método 'addHeader' NO se encontró o no es una función.");
    }
  } catch (e) {
    const errorMessage = "Error en la prueba de entorno: " + e.toString();
    console.error(errorMessage);
    SpreadsheetApp.getUi().alert(errorMessage);
  }
}


/**
 * Función auxiliar para obtener el objeto de la hoja de cálculo.
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} La hoja de trabajo.
 */
function getSheet() {
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
  if (!sheet) {
    throw new Error('Hoja no encontrada: ' + SHEET_NAME + '. Asegúrate de que el nombre sea correcto.');
  }
  return sheet;
}

/**
 * CONFIGURACIÓN INICIAL: Ejecutar esta función manualmente UNA VEZ desde el editor.
 */
function setupSheetHeaders() {
  try {
    const sheet = getSheet();
    const headers = sheet.getRange("A1:B1").getValues()[0];
    if (sheet.getLastRow() < 1 || headers[0] !== "shareId" || headers[1] !== "JSON_DATA") {
      sheet.clear();
      sheet.getRange("A1:B1").setValues([["shareId", "JSON_DATA"]]);
      console.log("Encabezados de la hoja configurados correctamente.");
    } else {
      console.log("Los encabezados de la hoja ya son correctos.");
    }
  } catch (e) {
    console.error("Error al configurar los encabezados de la hoja: " + e.toString());
    throw e;
  }
}

