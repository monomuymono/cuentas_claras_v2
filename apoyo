AIzaSyDMhW9Fxz2kLG7HszVnBDmgQMJwzXSzd9U

https://script.google.com/macros/s/AKfycbzcp2CFlrnDnIzmRadn553OYMNYXo5AldaGdnmsisgt8O3Qm07tHj5iWGh9dCdg-leQ/exec

{
  "postData": {
    "contents": "{\"action\":\"save\",\"shareId\":\"test_session_123\",\"data\":{\"comensales\":[{\"id\":1,\"name\":\"Juan\",\"selectedItems\":[],\"total\":0}],\"availableProducts\":{},\"totalGeneralMesa\":0,\"propinaSugerida\":0,\"activeSharedInstances\":{}}}"
  }
}


{
  "action": "save",
  "shareId": "mi_id_de_prueba_app_react",
  "data": {
    "comensales": [
      {"id":1,"name":"Alice","selectedItems":[],"total":0}
    ],
    "availableProducts": {},
    "totalGeneralMesa": 10000,
    "propinaSugerida": 1000,
    "activeSharedInstances": {}
  }
}

error: TypeError: errorOutput.addHeader is not a function (línea 65, archivo "Código")

/**
 * @fileoverview
 * Google Apps Script (VERSIÓN DE DIAGNÓSTICO FINAL)
 *
 * =======================================================================================
 * === PROPÓSITO DE ESTA VERSIÓN ===
 * =======================================================================================
 * Este es el script más simple posible. No usa la Hoja de Cálculo, ni try/catch, ni addHeader.
 * Su único objetivo es probar si la comunicación básica entre un navegador y el
 * servicio de Google Apps Script funciona en su cuenta.
 *
 * Instrucciones:
 * 1. Despliegue esto como una "Nueva implementación" (New deployment).
 * 2. Asegúrese de que el acceso sea "Anyone" (Cualquier persona).
 * 3. Pegue la URL de la aplicación web directamente en su navegador.
 *
 * Si esto funciona, el problema está en la interacción con la Hoja de Cálculo.
 * Si esto falla, el problema está en la plataforma de Google.
 * =======================================================================================
 */

/**
 * Maneja las solicitudes GET. Devuelve un texto simple.
 * @param {object} e El objeto del evento.
 * @returns {GoogleAppsScript.Content.TextOutput} Un texto de confirmación.
 */
function doGet(e) {
  console.log("Ejecutando la prueba de diagnóstico final (doGet).");
  return ContentService.createTextOutput("Hello from Google. The basic connection works.");
}

/**
 * Maneja las solicitudes POST. Devuelve un texto simple.
 * @param {object} e El objeto del evento.
 * @returns {GoogleAppsScript.Content.TextOutput} Un texto de confirmación.
 */
function doPost(e) {
  console.log("Ejecutando la prueba de diagnóstico final (doPost).");
  return ContentService.createTextOutput("POST request received successfully.");
}

/**
 * Maneja las solicitudes OPTIONS. Devuelve una respuesta simple sin headers.
 * Esto es para que las solicitudes POST de prueba no fallen por CORS.
 * @param {object} e El objeto del evento.
 * @returns {GoogleAppsScript.Content.TextOutput} Una respuesta vacía.
 */
function doOptions(e) {
    // Para simplificar al máximo, esta versión no añade cabeceras CORS.
    // Una prueba con 'fetch' desde la consola del navegador podría fallar por CORS,
    // pero la prueba de doGet pegando la URL en el navegador debería funcionar.
    return ContentService.createTextOutput();
}

