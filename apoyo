AIzaSyDMhW9Fxz2kLG7HszVnBDmgQMJwzXSzd9U

https://script.google.com/macros/s/AKfycbzcp2CFlrnDnIzmRadn553OYMNYXo5AldaGdnmsisgt8O3Qm07tHj5iWGh9dCdg-leQ/exec

{
  "postData": {
    "contents": "{\"action\":\"save\",\"shareId\":\"test_session_123\",\"data\":{\"comensales\":[{\"id\":1,\"name\":\"Juan\",\"selectedItems\":[],\"total\":0}],\"availableProducts\":{},\"totalGeneralMesa\":0,\"propinaSugerida\":0,\"activeSharedInstances\":{}}}"
  }
}


{
  "action": "save",
  "shareId": "mi_id_de_prueba_app_react",
  "data": {
    "comensales": [
      {"id":1,"name":"Alice","selectedItems":[],"total":0}
    ],
    "availableProducts": {},
    "totalGeneralMesa": 10000,
    "propinaSugerida": 1000,
    "activeSharedInstances": {}
  }
}

error: {"status":"error","message":"output.addHeader is not a function"}

/**
 * @fileoverview
 * Google Apps Script usando JSONP para evitar problemas de CORS.
 * Esta versión no usa `addHeader`.
 *
 * Funcionalidad:
 * - Responde a las solicitudes GET envolviendo los datos en una función de callback.
 * - Las solicitudes POST se simplifican y pueden no funcionar de manera fiable con JSONP. El enfoque principal es GET.
 */

// --- CONFIGURACIÓN ---
const SPREADSHEET_ID = 'YOUR_GOOGLE_SHEET_ID_HERE'; // <<-- ¡REEMPLAZA ESTO!
const SHEET_NAME = 'Sessions'; // Asegúrate de que este nombre coincida.

function getSheet() {
  try {
    const spreadSheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadSheet.getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error('Hoja no encontrada: "' + SHEET_NAME + '"');
    }
    return sheet;
  } catch (e) {
    console.error("Error al abrir la Hoja de Cálculo. Verifica el ID y los permisos. Error: " + e.toString());
    throw new Error("No se pudo acceder a la Hoja de Cálculo.");
  }
}

/**
 * Maneja las solicitudes GET usando el método JSONP.
 * @param {object} e El objeto del evento. Espera un parámetro 'id' y un parámetro 'callback'.
 * @returns {GoogleAppsScript.Content.TextOutput} La respuesta como código JavaScript.
 */
function doGet(e) {
  let responseData;
  const callbackFunction = e.parameter.callback;

  // Si no se proporciona una función de callback, no se puede usar JSONP.
  if (!callbackFunction) {
    return ContentService.createTextOutput("Error: Se requiere un parámetro 'callback' para usar esta API con JSONP.");
  }

  try {
    const shareId = e.parameter.id;
    if (!shareId) {
      responseData = { status: 'info', message: 'API activa. Proporciona un ID para obtener datos.' };
    } else {
      const sheet = getSheet();
      const data = sheet.getDataRange().getValues();
      let sessionDataString = null;

      for (let i = 1; i < data.length; i++) {
        if (data[i][0] == shareId) {
          sessionDataString = data[i][1];
          break;
        }
      }
      
      // Si se encuentran datos, se parsean. Si no, se crea un objeto not_found.
      if (sessionDataString) {
          // No necesitamos volver a convertir a string, ya lo está. La respuesta final sí lo necesita.
          responseData = JSON.parse(sessionDataString);
      } else {
          responseData = { status: "not_found", message: "No se encontraron datos para el ID proporcionado." };
      }
    }
  } catch (error) {
    console.error("Error en doGet (JSONP): " + error.toString());
    responseData = { status: 'error', message: error.message };
  }
  
  // Envuelve la respuesta JSON en la función de callback.
  const jsonpResponse = `${callbackFunction}(${JSON.stringify(responseData)})`;
  
  // Devuelve la respuesta como JavaScript.
  return ContentService.createTextOutput(jsonpResponse).setMimeType(ContentService.MimeType.JAVASCRIPT);
}

// Nota: doPost es difícil de implementar de forma fiable con JSONP desde el navegador.
// Esta implementación se deja para ser llamada desde entornos que no sean un navegador (como Postman o un servidor).
function doPost(e) {
    // La lógica de doPost permanece igual, pero no será llamada por el frontend con JSONP.
    // ... puedes pegar aquí la lógica de tu doPost anterior si la necesitas para otras herramientas.
    return ContentService.createTextOutput("doPost no está diseñado para usarse con JSONP desde un navegador.");
}

